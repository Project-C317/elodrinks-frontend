import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { publicApi } from "../services/api";
import { FiLock, FiUnlock } from "react-icons/fi";
import { jwtDecode } from "jwt-decode";

type User = {
  id: number;
  name: string;
  surname: string;
  age: string;
  cpf: string;
  email: string;
  phone: string;
  password: string;
  createdAt: string;
};

function getInitialUsers(): User[] {
  const users = localStorage.getItem("users");
  if (users) return JSON.parse(users);
  const demoUsers: User[] = [
    {
      id: 1,
      name: "João",
      surname: "Silva",
      age: "30",
      cpf: "123.456.789-00",
      email: "joao@exemplo.com",
      phone: "(11) 91234-5678",
      password: "123456",
      createdAt: new Date().toISOString(),
    },
  ];
  localStorage.setItem("users", JSON.stringify(demoUsers));
  return demoUsers;
}

// CSS-in-JS string
const style = `
  /* Vídeo atrás */
  .video-bg {
    position: fixed; top: 0; left: 0;
    width: 100%; height: 100%;
    object-fit: cover; z-index: -1; opacity: 0.15;
  }

  /* Container genérico com overlay escuro */
  .container {
    position: relative;
    z-index: 1;
    min-height: 100vh;
    padding: 20px 3% 20px 20px; /* 3% à direita, 20px nas outras */
    background: transparent;
  }

  /* Quando houver SVG ao lado, usa flex e alinha à direita */
  .container.with-svg {
    position: static;
    display: block;
    justify-content: center;
    padding:0;
  }

  /* Ajuste do SVG */
  .svg-wrapper {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 2;
  }
  .svg-wrapper svg {
    width: 250px;
    height: auto;
    fill: rgb(247,246,243);
  }
  

  /* Card glassmorphism */
  .form-container {
    position: absolute;
    top: 200px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 2;
    width: 420px;
    padding: 40px;
    border-radius: 16px;
    background: none;
    //border: 1px solid rgba(255, 255, 255, 0.2);
    //box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(10px);
    transition: transform 0.3s ease;
  }
  .form-container:hover {
    transform: translate() translateY(-4px);
  }


  .form-toggle {
    display: flex; position: relative; overflow: hidden;
    background: rgba(255,255,255,0.25); border-radius: 50px;
    margin-bottom: 30px;
  }
  .toggle-btn {
    flex: 1; padding: 12px 20px; text-align: center;
    background: none; border: none; cursor: pointer;
    font-weight: 600; color: #fff; transition: color 0.3s;
    position: relative; z-index: 2;
  }
  .toggle-btn.active { color: #101820; }
  .toggle-slider {
    position: absolute; top: 0; left: 0;
    width: 50%; height: 100%;
    background: #e0ceaa;
    border-radius: 50px; transition: transform 0.3s;
    z-index: 1;
  }
  .toggle-slider.signup { transform: translateX(100%); }

  .form-group { margin-bottom: 10px; position: relative; display: flex; justify-content: center;}
  .form-input {
    width: 100%; padding: 15px 20px;
    border: 1px solid rgba(255,255,255,0.4);
    border-radius: 10px; background: rgba(255,255,255,0.15);
    color: #fff; font-size: 16px; transition: border-color 0.3s;
    font-size: 14px;
  }
  .form-input::placeholder { color: rgba(255,255,255,0.7);}
  .form-input:focus {
    outline: none; border-color: #fff;
    box-shadow: 0 0 0 3px rgba(255,255,255,0.3);
  }

  .submit-btn {
    width: 100%; padding: 15px;
    background: rgba(224, 206, 170,0.5);
    color: #101820; border: 1px solid rgba(255,255,255,0.4);
    border-radius: 12px; font-size: 16px; font-weight: 600;
    cursor: pointer; transition: background 0.3s;
    margin-top: 10px;
  }
  .submit-btn:hover {
    background: rgba(255,255,255,0.7);
  }

  .forgot-password {
    text-align: center; margin-top: 20px;
  }
  .forgot-password a {
    color: #fff; text-decoration: none; font-size: 14px;
    transition: color 0.3s;
  }
  .forgot-password a:hover {
    color: rgba(255,255,255,0.9);
  }

  .form-section { display: none; animation: fadeIn 0.3s ease; }
  .form-section.active { display: block; }
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to   { opacity: 1; transform: translateY(0); }
  }

  .error-message, .success-message {
    padding: 10px 15px; border-radius: 8px; margin-bottom: 20px;
    font-size: 14px; display: none;
    background: rgba(255,255,255,0.3); color: #101820;
    border: 1px solid rgba(255,255,255,0.5);
  }

  .show-password {
    position: absolute; right: 15px; top: 50%;
    transform: translateY(-50%);
    background: none; border: none; 
    cursor: pointer; font-size: 14px;
  }

  @media (max-width: 480px) {
    .form-container { padding: 30px 20px; width: auto; }
  }
`;

const Login: React.FC = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [showPassword, setShowPassword] = useState<{ [key: string]: boolean }>(
    {}
  );
  const [successMessage, setSuccessMessage] = useState("");
  const [errorMessage, setErrorMessage] = useState("");
  const [loginEmail, setLoginEmail] = useState("");
  const [loginPassword, setLoginPassword] = useState("");
  const [signupName, setSignupName] = useState("");
  const [signupEmail, setSignupEmail] = useState("");
  const [signupSurname, setSignupSurname] = useState("");
  const [signupAge, setSignupAge] = useState("");
  const [signupCpf, setSignupCpf] = useState("");
  const [signupPhone, setSignupPhone] = useState("");
  const [signupPassword, setSignupPassword] = useState("");
  const [signupConfirmPassword, setSignupConfirmPassword] = useState("");
  const [signupRole, setSignupRole] = useState("user");
  const [users] = useState<User[]>(getInitialUsers);
  const navigate = useNavigate();

  const handleToggle = (login: boolean) => {
    setIsLogin(login);
    setSuccessMessage("");
    setErrorMessage("");
  };

  const handleShowPassword = (field: string) => {
    setShowPassword((prev) => ({
      ...prev,
      [field]: !prev[field],
    }));
  };

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await publicApi.loginUser({
        Email: loginEmail,
        Password: loginPassword,
      });

      const { token } = response.data;

      // Salva o token no localStorage
      localStorage.setItem("token", token);

      // Decodifica o token para obter o role
      const decodedToken = jwtDecode<{ role: string }>(token);

      setErrorMessage("");

      if (decodedToken.role === "admin") {
        navigate("/config");
      } else {
        navigate("/home");
      }
    } catch {
      setErrorMessage("Email ou senha incorretos!");
      setSuccessMessage("");
    }
  };

  const handleSignup = async (e: React.FormEvent) => {
    e.preventDefault();

    if (signupPassword !== signupConfirmPassword) {
      setErrorMessage("As senhas não coincidem!");
      return;
    }

    try {
      const newUser = {
        Name: signupName,
        Surname: signupSurname,
        Age: signupAge,
        Cpf: signupCpf,
        Email: signupEmail,
        Phone: signupPhone,
        Password: signupPassword,
        Role: signupRole,
      };

      await publicApi.registerUser(newUser);

      setSuccessMessage(
        "Conta criada com sucesso! Você pode fazer login agora."
      );
      setErrorMessage("");

      // Limpa os campos
      setSignupName("");
      setSignupSurname("");
      setSignupAge("");
      setSignupCpf("");
      setSignupEmail("");
      setSignupPhone("");
      setSignupPassword("");
      setSignupConfirmPassword("");

      setTimeout(() => {
        navigate("/");
      }, 2000);
    } catch {
      setErrorMessage(
        "Erro ao criar conta. Verifique os dados e tente novamente."
      );
      setSuccessMessage("");
    }
  };

  const handleForgotPassword = () => {
    const email = prompt("Digite seu email para recuperação de senha:");
    if (email) {
      const user = users.find((u) => u.email === email);
      if (user) {
        setSuccessMessage("Instruções de recuperação enviadas para seu email!");
        setErrorMessage("");
      } else {
        setErrorMessage("Email não encontrado!");
        setSuccessMessage("");
      }
    }
  };

  return (
    <>
      <style>{style}</style>

      {/* Vídeo full-screen atrás */}
      <video className="video-bg" autoPlay muted loop playsInline>
        <source src="/videos/background.mp4" type="video/mp4" />
      </video>

      <div className="display-logo">
        {" "}
        {/* coluna do SVG */}
        <div className="svg-wrapper">
          <svg
            width="464"
            height="297"
            viewBox="0 0 464 297"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <g clip-path="url(#clip0_174_2)">
              <path
                d="M7.02536 211.628H25.4103V213.072H7.02536V245.915H36.9647V247.359H0V180.034L36.9647 179.939V181.383H7.02536V211.628Z"
                fill="#e0ceaa"
              />
              <path
                d="M44.7643 247.364V179.939H51.8897L51.7949 244.761C51.7949 245.146 52.0213 245.467 52.469 245.725C53.754 245.92 54.9389 245.983 56.029 245.92L81.7343 245.825V247.364H44.7695H44.7643Z"
                fill="#e0ceaa"
              />
              <path
                d="M141.418 213.746C141.418 219.653 140.196 225.08 137.758 230.023C135.383 235.224 131.791 239.397 126.978 242.543C122.101 245.752 116.387 247.359 109.841 247.359C103.295 247.359 97.486 245.757 92.6094 242.543C87.9223 239.46 84.3306 235.287 81.8291 230.023C79.4539 225.017 78.269 219.59 78.269 213.746C78.269 207.903 79.4539 202.317 81.8291 197.18C84.2042 191.979 87.7959 187.806 92.6094 184.66C97.3596 181.514 103.1 179.939 109.841 179.939C116.582 179.939 122.227 181.514 126.978 184.66C131.791 187.806 135.383 191.979 137.758 197.18C140.196 202.254 141.418 207.776 141.418 213.746ZM134.293 213.746C134.293 208.287 133.361 203.023 131.502 197.949C129.706 193.196 126.915 189.25 123.128 186.104C121.201 184.565 119.099 183.406 116.824 182.637C114.544 181.867 112.216 181.483 109.846 181.483C104.901 181.483 100.446 183.021 96.4643 186.104C92.6146 189.381 89.8234 193.36 88.0908 198.049C86.2265 203.124 85.2996 208.356 85.2996 213.752C85.2996 219.147 86.2318 224.285 88.0908 229.354C89.8234 234.17 92.6146 238.185 96.4643 241.394C100.44 244.413 104.901 245.92 109.846 245.92C112.221 245.92 114.549 245.536 116.824 244.766C119.105 243.997 121.206 242.875 123.128 241.394C126.915 238.311 129.706 234.333 131.502 229.449C133.361 224.38 134.293 219.142 134.293 213.746Z"
                fill="#e0ceaa"
              />
              <path
                d="M229.688 213.267C229.688 219.753 228.245 225.565 225.354 230.703C222.468 235.714 218.486 239.755 213.415 242.838C208.085 245.857 202.535 247.364 196.763 247.364H180.11V179.939H196.763C202.54 179.939 208.091 181.446 213.415 184.465C218.481 187.548 222.463 191.594 225.354 196.6C228.24 201.801 229.688 207.355 229.688 213.262V213.267ZM222.663 213.557C222.663 207.971 221.541 202.639 219.292 197.57C217.238 192.817 214.126 188.902 209.955 185.819C206.042 182.869 201.581 181.388 196.573 181.388H190.122C188.837 181.388 188.036 181.836 187.715 182.737C187.331 184.47 187.167 186.172 187.236 187.843V245.825H196.573C201.576 245.825 206.037 244.35 209.955 241.394C214.063 238.311 217.175 234.396 219.292 229.644C221.536 224.569 222.663 219.211 222.663 213.557Z"
                fill="#e0ceaa"
              />
              <path
                d="M288.219 247.264H287.16C286.133 247.264 285.075 247.169 283.984 246.974C282.189 246.779 280.488 246.299 278.881 245.53C276.248 244.244 274.263 242.321 272.915 239.75C270.924 235.898 269.128 231.851 267.522 227.615C266.237 224.343 264.214 221.45 261.455 218.947C259.017 216.829 256.225 215.77 253.081 215.77L247.014 215.675V247.364H239.989V179.939H257.7C262.066 179.812 266.205 180.645 270.118 182.442C273.325 183.917 275.927 186.135 277.918 189.086C279.65 191.91 280.519 194.867 280.519 197.949C280.519 200.004 280.135 202.012 279.366 203.966C278.597 205.927 277.502 207.676 276.095 209.215C273.078 212.555 268.938 214.642 263.677 215.474C263.872 215.474 264.609 215.796 265.894 216.439C267.048 217.082 267.854 217.63 268.301 218.077C270.418 219.49 272.088 221.355 273.31 223.663C274.784 226.682 275.969 229.538 276.87 232.236C277.77 234.612 278.523 236.52 279.134 237.969C279.745 239.413 280.403 240.651 281.109 241.678C283.1 244.181 285.475 246.047 288.234 247.264H288.219ZM265.594 212.013C268.227 210.664 270.276 208.64 271.756 205.942C273.104 203.44 273.778 200.742 273.778 197.854C273.778 194.967 273.104 192.169 271.756 189.666C270.281 187.031 268.227 184.981 265.594 183.501C262.387 181.83 259.08 181.03 255.678 181.093H248.937C247.652 181.093 247.009 181.572 247.009 182.537V214.32H255.672C259.201 214.452 262.508 213.678 265.589 212.007L265.594 212.013Z"
                fill="#e0ceaa"
              />
              <path
                d="M302.659 247.364H295.534V179.939H302.659V247.364Z"
                fill="#e0ceaa"
              />
              <path
                d="M317.289 187.358L317.384 247.364H316.13V180.039H321.523L354.449 242.358V180.039H355.797V247.364H348.961L317.289 187.358Z"
                fill="#e0ceaa"
              />
              <path
                d="M406.623 247.364L376.589 215L376.394 215.195V247.364H369.368V179.939H376.494L376.399 212.108L404.411 179.939H406.238L380.344 209.895L414.517 247.364H406.623Z"
                fill="#e0ceaa"
              />
              <path
                d="M464 231.182C464 233.495 463.5 235.645 462.51 237.637C461.514 239.629 460.119 241.236 458.323 242.453C454.984 244.766 451.261 246.21 447.158 246.79C444.783 247.111 442.603 247.269 440.612 247.269C438.3 247.269 435.993 247.074 433.681 246.689C427.072 245.662 421.711 243.286 417.603 239.56L418.277 238.791C419.752 240.013 421.358 241.072 423.091 241.968C426.556 243.575 430.021 244.603 433.487 245.051C434.835 245.246 436.151 245.34 437.431 245.34C439.227 245.34 441.344 245.114 443.782 244.666C446.926 244.155 449.749 243.064 452.256 241.389C453.604 240.619 454.647 239.513 455.384 238.064C456.121 236.62 456.49 235.06 456.49 233.39C456.49 231.53 456.011 229.828 455.047 228.284C453.567 226.166 451.771 224.464 449.654 223.178C447.084 221.64 443.94 220.001 440.222 218.267C435.856 216.275 432.102 214.321 428.957 212.392C426.071 210.463 423.823 208.055 422.216 205.168C421.063 203.308 420.484 200.931 420.484 198.039C420.484 196.885 420.579 195.631 420.773 194.282C421.737 188.823 424.528 184.876 429.147 182.436C432.676 180.766 436.336 179.934 440.122 179.934C441.792 179.934 443.266 180.065 444.551 180.318C446.605 180.576 448.659 181.151 450.713 182.052C451.803 182.5 453.12 183.206 454.663 184.17C457.227 185.904 459.539 188.117 461.593 190.815L460.629 191.874C458.191 188.343 455.11 185.645 451.387 183.785C449.718 182.953 448.29 182.405 447.105 182.147C445.915 181.888 444.298 181.636 442.245 181.377C438.648 181.182 435.251 181.857 432.038 183.401C429.921 184.365 428.22 185.84 426.935 187.832C425.65 189.824 425.008 192.005 425.008 194.382C425.008 196.5 425.587 198.397 426.74 200.062C428.473 202.375 430.495 204.235 432.807 205.647C436.657 207.829 440.122 209.594 443.203 210.943C447.374 212.935 451.287 215.053 454.947 217.298C457.77 218.968 460.113 221.244 461.972 224.137C463.321 226.255 463.995 228.6 463.995 231.166L464 231.182Z"
                fill="#e0ceaa"
              />
              <path
                d="M264.746 0C250.311 0 238.604 11.7082 238.604 26.1564V147.612C238.604 149.198 237.319 150.484 235.734 150.484H228.266C226.681 150.484 225.396 149.198 225.396 147.612V26.1564C225.396 11.7135 213.694 0 199.254 0V127.21C199.254 141.584 210.845 153.25 225.185 153.361H238.615C253.05 153.361 264.746 141.647 264.746 127.204V0Z"
                fill="#e0ceaa"
              />
              <path
                d="M49.5777 288.448C48.6983 287.679 47.3448 287.104 45.5174 286.72L42.6893 286.119C41.4728 285.882 40.6038 285.513 40.0667 285.002C39.5295 284.496 39.2662 283.806 39.2662 282.937C39.2662 282.209 39.461 281.572 39.8507 281.019C40.2404 280.465 40.7829 280.044 41.4833 279.754C42.1785 279.464 43.0106 279.317 43.969 279.317C45.0908 279.317 46.1072 279.485 47.013 279.817C47.9188 280.154 48.7773 280.692 49.5935 281.435L50.3835 279.696C49.8779 279.19 49.2934 278.758 48.6298 278.405C47.9662 278.052 47.25 277.783 46.4706 277.604C45.6912 277.425 44.8696 277.33 43.9954 277.33C42.6367 277.33 41.4254 277.567 40.3668 278.036C39.3083 278.505 38.4815 279.169 37.8916 280.023C37.3018 280.876 37.0069 281.872 37.0069 283.016C37.0069 284.391 37.4282 285.492 38.2708 286.319C39.1134 287.147 40.3879 287.737 42.089 288.1L44.917 288.669C45.807 288.849 46.5232 289.075 47.0762 289.349C47.6292 289.623 48.0294 289.95 48.2717 290.329C48.5139 290.709 48.6403 291.162 48.6403 291.689C48.6403 292.685 48.2454 293.486 47.4607 294.097C46.6707 294.703 45.4647 295.008 43.8321 295.008C42.9421 295.008 42.1258 294.929 41.3727 294.776C40.6196 294.624 39.9245 294.387 39.282 294.07C38.6395 293.754 38.0075 293.37 37.3913 292.916L36.6014 294.713C37.2017 295.203 37.8653 295.614 38.5973 295.952C39.3294 296.289 40.1351 296.547 41.0146 296.726C41.8941 296.905 42.8315 297 43.8269 297C45.2751 297 46.5285 296.774 47.5923 296.32C48.6509 295.867 49.4672 295.23 50.0359 294.402C50.6047 293.58 50.8891 292.637 50.8891 291.589C50.8891 290.266 50.452 289.217 49.5725 288.448H49.5777Z"
                fill="#e0ceaa"
              />
              <path
                d="M54.3491 296.752H66.4407V294.876H56.5188V287.974H65.8667V286.098H56.5188V279.464H66.4407V277.588H54.3491V296.752Z"
                fill="#e0ceaa"
              />
              <path
                d="M83.1509 289.059C83.1509 291.051 82.698 292.542 81.7922 293.533C80.8864 294.523 79.5382 295.013 77.7424 295.013C75.9465 295.013 74.5878 294.518 73.6662 293.533C72.7446 292.547 72.2811 291.056 72.2811 289.059V277.588H70.0534V289.17C70.0534 291.725 70.7117 293.67 72.0231 295.003C73.3344 296.336 75.2408 297 77.7424 297C80.2439 297 82.1398 296.336 83.4353 295.003C84.7308 293.67 85.3786 291.725 85.3786 289.17V277.588H83.1509V289.059Z"
                fill="#e0ceaa"
              />
              <path
                d="M108.703 278.689C107.26 277.957 105.501 277.588 103.416 277.588H96.9489V296.758H103.416C105.496 296.758 107.26 296.389 108.703 295.656C110.141 294.924 111.242 293.838 111.99 292.405C112.743 290.972 113.117 289.223 113.117 287.157C113.117 285.091 112.743 283.347 111.99 281.925C111.237 280.502 110.141 279.422 108.703 278.689ZM108.898 292.922C107.655 294.207 105.775 294.85 103.258 294.85H99.1818V279.49H103.258C105.76 279.49 107.634 280.128 108.882 281.408C110.131 282.689 110.757 284.601 110.757 287.157C110.757 289.713 110.136 291.636 108.898 292.922Z"
                fill="#e0ceaa"
              />
              <path
                d="M127.357 288.759C127.13 288.601 126.878 288.485 126.614 288.395C127.167 288.29 127.678 288.137 128.142 287.932C129.1 287.505 129.832 286.883 130.327 286.056C130.827 285.234 131.075 284.259 131.075 283.131C131.075 281.356 130.522 279.986 129.416 279.027C128.31 278.068 126.736 277.588 124.687 277.588H117.103V296.758H119.331V288.654H122.807C123.407 288.654 123.918 288.706 124.345 288.817C124.771 288.928 125.15 289.128 125.487 289.412C125.824 289.702 126.125 290.103 126.398 290.608L129.711 296.752H132.155L128.784 290.498C128.347 289.702 127.868 289.122 127.346 288.759H127.357ZM119.342 286.883V279.432H124.371C125.856 279.432 126.978 279.743 127.741 280.37C128.505 280.997 128.884 281.914 128.884 283.131C128.884 284.349 128.505 285.318 127.741 285.945C126.983 286.572 125.856 286.883 124.371 286.883H119.342Z"
                fill="#e0ceaa"
              />
              <path
                d="M137.521 277.588H135.293V296.758H137.521V277.588Z"
                fill="#e0ceaa"
              />
              <path
                d="M155.537 293.001L143.988 277.588H142.25V296.752H144.341V281.303L155.917 296.752H157.602V277.588H155.537V293.001Z"
                fill="#e0ceaa"
              />
              <path
                d="M176.787 277.588H173.933L164.638 286.288H164.585V277.588H162.357V296.752H164.585V287.726H164.638L174.449 296.752H177.382L166.792 286.899L176.787 277.588Z"
                fill="#e0ceaa"
              />
              <path
                d="M186.325 296.752H198.416V294.876H188.494V287.974H197.842V286.098H188.494V279.464H198.416V277.588H186.325V296.752Z"
                fill="#e0ceaa"
              />
              <path
                d="M211.456 291.415L204.093 277.588H202.219V296.752H204.257V281.761L210.724 293.791H212.193L218.576 281.804V296.752H220.64V277.588H218.766L211.456 291.415Z"
                fill="#e0ceaa"
              />
              <path
                d="M245.666 293.001L234.117 277.588H232.379V296.752H234.47V281.303L246.045 296.752H247.731V277.588H245.666V293.001Z"
                fill="#e0ceaa"
              />
              <path
                d="M266.958 279.98C266.189 279.127 265.262 278.479 264.188 278.02C263.109 277.567 261.892 277.341 260.533 277.341C259.175 277.341 257.984 277.572 256.905 278.036C255.825 278.5 254.909 279.153 254.145 279.996C253.387 280.839 252.802 281.862 252.391 283.068C251.986 284.275 251.781 285.64 251.781 287.157C251.781 288.675 251.986 290.024 252.391 291.236C252.797 292.447 253.381 293.485 254.145 294.334C254.909 295.187 255.83 295.841 256.915 296.305C258 296.768 259.206 297 260.528 297C261.85 297 263.103 296.768 264.183 296.305C265.262 295.841 266.179 295.187 266.942 294.334C267.701 293.48 268.291 292.447 268.707 291.236C269.123 290.024 269.333 288.654 269.333 287.131C269.333 285.608 269.128 284.27 268.722 283.068C268.317 281.862 267.727 280.834 266.958 279.98ZM266.21 291.399C265.705 292.579 264.973 293.475 264.025 294.091C263.072 294.708 261.908 295.014 260.533 295.014C259.159 295.014 258.048 294.703 257.094 294.076C256.141 293.449 255.414 292.553 254.909 291.383C254.403 290.213 254.145 288.806 254.145 287.157C254.145 285.508 254.398 284.101 254.909 282.931C255.414 281.761 256.146 280.871 257.094 280.254C258.048 279.638 259.19 279.332 260.533 279.332C261.876 279.332 263.072 279.643 264.025 280.254C264.978 280.871 265.705 281.761 266.21 282.921C266.716 284.08 266.974 285.497 266.974 287.162C266.974 288.827 266.721 290.224 266.21 291.404V291.399Z"
                fill="#e0ceaa"
              />
              <path
                d="M285.269 288.448C284.39 287.679 283.037 287.104 281.209 286.72L278.381 286.119C277.164 285.882 276.29 285.513 275.758 285.002C275.221 284.496 274.958 283.806 274.958 282.937C274.958 282.209 275.153 281.572 275.542 281.019C275.932 280.465 276.475 280.044 277.175 279.754C277.87 279.464 278.702 279.317 279.661 279.317C280.783 279.317 281.799 279.485 282.705 279.817C283.611 280.154 284.469 280.692 285.285 281.435L286.075 279.696C285.57 279.19 284.985 278.758 284.322 278.405C283.658 278.052 282.942 277.783 282.162 277.604C281.383 277.425 280.561 277.33 279.687 277.33C278.328 277.33 277.117 277.567 276.059 278.036C275 278.505 274.173 279.169 273.583 280.023C272.994 280.876 272.699 281.872 272.699 283.016C272.699 284.391 273.12 285.492 273.963 286.319C274.805 287.147 276.08 287.737 277.781 288.1L280.609 288.669C281.499 288.849 282.215 289.075 282.768 289.349C283.321 289.623 283.721 289.95 283.963 290.329C284.206 290.709 284.332 291.162 284.332 291.689C284.332 292.685 283.937 293.486 283.152 294.097C282.362 294.703 281.156 295.008 279.524 295.008C278.634 295.008 277.818 294.929 277.064 294.776C276.311 294.624 275.616 294.387 274.974 294.07C274.331 293.754 273.699 293.37 273.083 292.916L272.293 294.713C272.893 295.203 273.557 295.614 274.289 295.952C275.021 296.289 275.827 296.547 276.706 296.726C277.586 296.905 278.523 297 279.519 297C280.967 297 282.22 296.774 283.284 296.32C284.343 295.867 285.159 295.23 285.728 294.402C286.296 293.58 286.581 292.637 286.581 291.589C286.581 290.266 286.144 289.217 285.264 288.448H285.269Z"
                fill="#e0ceaa"
              />
              <path
                d="M301.98 288.448C301.1 287.679 299.747 287.104 297.919 286.72L295.091 286.119C293.875 285.882 293 285.513 292.469 285.002C291.931 284.496 291.668 283.806 291.668 282.937C291.668 282.209 291.863 281.572 292.253 281.019C292.642 280.465 293.185 280.044 293.885 279.754C294.58 279.464 295.412 279.317 296.371 279.317C297.493 279.317 298.509 279.485 299.415 279.817C300.321 280.154 301.179 280.692 301.995 281.435L302.785 279.696C302.28 279.19 301.695 278.758 301.032 278.405C300.368 278.052 299.652 277.783 298.872 277.604C298.093 277.425 297.272 277.33 296.397 277.33C295.039 277.33 293.827 277.567 292.769 278.036C291.71 278.505 290.883 279.169 290.294 280.023C289.704 280.876 289.409 281.872 289.409 283.016C289.409 284.391 289.83 285.492 290.673 286.319C291.515 287.147 292.79 287.737 294.491 288.1L297.319 288.669C298.209 288.849 298.925 289.075 299.478 289.349C300.031 289.623 300.431 289.95 300.674 290.329C300.916 290.709 301.042 291.162 301.042 291.689C301.042 292.685 300.647 293.486 299.863 294.097C299.073 294.703 297.867 295.008 296.234 295.008C295.344 295.008 294.528 294.929 293.775 294.776C293.022 294.624 292.326 294.387 291.684 294.07C291.041 293.754 290.409 293.37 289.793 292.916L289.003 294.713C289.604 295.203 290.267 295.614 290.999 295.952C291.731 296.289 292.537 296.547 293.417 296.726C294.296 296.905 295.233 297 296.229 297C297.677 297 298.93 296.774 299.994 296.32C301.053 295.867 301.869 295.23 302.438 294.402C303.007 293.58 303.291 292.637 303.291 291.589C303.291 290.266 302.854 289.217 301.974 288.448H301.98Z"
                fill="#e0ceaa"
              />
              <path
                d="M313.355 277.588L304.903 296.758H307.215L309.305 291.862H319.28L321.397 296.758H323.709L315.256 277.588H313.355ZM314.277 280.196H314.329L318.485 289.987H310.122L314.277 280.196Z"
                fill="#e0ceaa"
              />
              <path
                d="M338.502 288.448C337.623 287.679 336.269 287.104 334.442 286.72L331.614 286.119C330.397 285.882 329.523 285.513 328.991 285.002C328.454 284.496 328.19 283.806 328.19 282.937C328.19 282.209 328.385 281.572 328.775 281.019C329.165 280.465 329.707 280.044 330.408 279.754C331.103 279.464 331.935 279.317 332.893 279.317C334.015 279.317 335.032 279.485 335.937 279.817C336.843 280.154 337.702 280.692 338.518 281.435L339.308 279.696C338.802 279.19 338.218 278.758 337.554 278.405C336.891 278.052 336.174 277.783 335.395 277.604C334.615 277.425 333.794 277.33 332.92 277.33C331.561 277.33 330.35 277.567 329.291 278.036C328.233 278.505 327.406 279.169 326.816 280.023C326.226 280.876 325.931 281.872 325.931 283.016C325.931 284.391 326.353 285.492 327.195 286.319C328.038 287.147 329.312 287.737 331.013 288.1L333.841 288.669C334.731 288.849 335.448 289.075 336.001 289.349C336.554 289.623 336.954 289.95 337.196 290.329C337.438 290.709 337.565 291.162 337.565 291.689C337.565 292.685 337.17 293.486 336.385 294.097C335.595 294.703 334.389 295.008 332.756 295.008C331.866 295.008 331.05 294.929 330.297 294.776C329.544 294.624 328.849 294.387 328.206 294.07C327.564 293.754 326.932 293.37 326.316 292.916L325.526 294.713C326.126 295.203 326.79 295.614 327.522 295.952C328.254 296.289 329.059 296.547 329.939 296.726C330.818 296.905 331.756 297 332.751 297C334.199 297 335.453 296.774 336.517 296.32C337.575 295.867 338.391 295.23 338.96 294.402C339.529 293.58 339.813 292.637 339.813 291.589C339.813 290.266 339.376 289.217 338.497 288.448H338.502Z"
                fill="#e0ceaa"
              />
              <path
                d="M359.547 291.415L352.184 277.588H350.309V296.752H352.347V281.761L358.809 293.791H360.279L366.667 281.804V296.752H368.731V277.588H366.856L359.547 291.415Z"
                fill="#e0ceaa"
              />
              <path
                d="M380.091 277.588L371.638 296.758H373.95L376.041 291.862H386.015L388.132 296.758H390.444L381.992 277.588H380.091ZM381.012 280.196H381.065L385.22 289.987H376.857L381.012 280.196Z"
                fill="#e0ceaa"
              />
              <path
                d="M377.289 273.873C377.594 273.505 378.021 273.315 378.569 273.315C378.821 273.315 379.101 273.383 379.411 273.52C379.722 273.657 380.128 273.894 380.633 274.242C381.233 274.622 381.755 274.906 382.208 275.101C382.661 275.291 383.098 275.386 383.514 275.386C384.399 275.386 385.136 275.075 385.715 274.448C386.294 273.821 386.637 272.93 386.747 271.771L385.499 271.692C385.373 272.382 385.157 272.909 384.846 273.283C384.536 273.657 384.114 273.842 383.572 273.842C383.319 273.842 383.045 273.779 382.755 273.652C382.466 273.526 382.029 273.273 381.449 272.893C380.87 272.514 380.365 272.229 379.943 272.05C379.517 271.871 379.09 271.776 378.653 271.776C377.763 271.776 377.031 272.087 376.452 272.714C375.872 273.341 375.519 274.232 375.393 275.391L376.641 275.47C376.768 274.78 376.984 274.253 377.294 273.879L377.289 273.873Z"
                fill="#e0ceaa"
              />
              <path
                d="M407.766 279.98C406.997 279.127 406.07 278.479 404.995 278.02C403.916 277.567 402.699 277.341 401.341 277.341C399.982 277.341 398.792 277.572 397.712 278.036C396.632 278.5 395.716 279.153 394.952 279.996C394.194 280.839 393.61 281.862 393.199 283.068C392.793 284.275 392.588 285.64 392.588 287.157C392.588 288.675 392.793 290.024 393.199 291.236C393.604 292.447 394.189 293.485 394.952 294.334C395.716 295.187 396.638 295.841 397.723 296.305C398.807 296.768 400.013 297 401.335 297C402.657 297 403.911 296.768 404.99 296.305C406.07 295.841 406.986 295.187 407.75 294.334C408.508 293.48 409.098 292.447 409.514 291.236C409.93 290.024 410.141 288.654 410.141 287.131C410.141 285.608 409.935 284.27 409.53 283.068C409.124 281.862 408.535 280.834 407.766 279.98ZM407.018 291.399C406.512 292.579 405.78 293.475 404.832 294.091C403.879 294.708 402.715 295.014 401.341 295.014C399.966 295.014 398.855 294.703 397.902 294.076C396.948 293.449 396.222 292.553 395.716 291.383C395.211 290.213 394.952 288.806 394.952 287.157C394.952 285.508 395.205 284.101 395.716 282.931C396.222 281.761 396.954 280.871 397.902 280.254C398.855 279.638 399.998 279.332 401.341 279.332C402.684 279.332 403.879 279.643 404.832 280.254C405.785 280.871 406.512 281.761 407.018 282.921C407.523 284.08 407.781 285.497 407.781 287.162C407.781 288.827 407.529 290.224 407.018 291.404V291.399Z"
                fill="#e0ceaa"
              />
              <path
                d="M426.077 288.448C425.197 287.679 423.844 287.104 422.016 286.72L419.188 286.119C417.972 285.882 417.098 285.513 416.566 285.002C416.028 284.496 415.765 283.806 415.765 282.937C415.765 282.209 415.96 281.572 416.35 281.019C416.739 280.465 417.282 280.044 417.982 279.754C418.677 279.464 419.51 279.317 420.468 279.317C421.59 279.317 422.606 279.485 423.512 279.817C424.418 280.154 425.276 280.692 426.093 281.435L426.882 279.696C426.377 279.19 425.792 278.758 425.129 278.405C424.465 278.052 423.749 277.783 422.97 277.604C422.19 277.425 421.369 277.33 420.494 277.33C419.136 277.33 417.924 277.567 416.866 278.036C415.807 278.505 414.98 279.169 414.391 280.023C413.801 280.876 413.506 281.872 413.506 283.016C413.506 284.391 413.927 285.492 414.77 286.319C415.612 287.147 416.887 287.737 418.588 288.1L421.416 288.669C422.306 288.849 423.022 289.075 423.575 289.349C424.128 289.623 424.528 289.95 424.771 290.329C425.013 290.709 425.139 291.162 425.139 291.689C425.139 292.685 424.744 293.486 423.96 294.097C423.17 294.703 421.964 295.008 420.331 295.008C419.441 295.008 418.625 294.929 417.872 294.776C417.119 294.624 416.423 294.387 415.781 294.07C415.138 293.754 414.506 293.37 413.89 292.916L413.1 294.713C413.701 295.203 414.364 295.614 415.096 295.952C415.828 296.289 416.634 296.547 417.514 296.726C418.393 296.905 419.33 297 420.326 297C421.774 297 423.028 296.774 424.091 296.32C425.15 295.867 425.966 295.23 426.535 294.402C427.104 293.58 427.388 292.637 427.388 291.589C427.388 290.266 426.951 289.217 426.071 288.448H426.077Z"
                fill="#e0ceaa"
              />
            </g>
            <defs>
              <clipPath id="clip0_174_2">
                <rect width="464" height="297" fill="white" />
              </clipPath>
            </defs>
          </svg>
        </div>
        {/* Container com SVG ao lado do form */}
        <div className="container with-svg">
          {/* coluna do formulário */}
          <div className="form-container">
            <div className="form-toggle">
              <button
                className={`toggle-btn${isLogin ? " active" : ""}`}
                onClick={() => handleToggle(true)}
              >
                Login
              </button>
              <button
                className={`toggle-btn${!isLogin ? " active" : ""}`}
                onClick={() => handleToggle(false)}
              >
                Cadastrar
              </button>
              <div className={`toggle-slider${!isLogin ? " signup" : ""}`} />
            </div>

            <div
              className="success-message"
              style={{ display: successMessage ? "block" : "none" }}
            >
              {successMessage}
            </div>
            <div
              className="error-message"
              style={{ display: errorMessage ? "block" : "none" }}
            >
              {errorMessage}
            </div>

            {/* Login Form */}
            <div className={`form-section${isLogin ? " active" : ""}`}>
              <form onSubmit={handleLogin}>
                <div className="form-group">
                  <input
                    type="email"
                    className="form-input"
                    placeholder="Email"
                    required
                    value={loginEmail}
                    onChange={(e) => setLoginEmail(e.target.value)}
                  />
                </div>
                <div className="form-group">
                  <input
                    type={showPassword.loginPassword ? "text" : "password"}
                    className="form-input"
                    placeholder="Senha"
                    required
                    value={loginPassword}
                    onChange={(e) => setLoginPassword(e.target.value)}
                  />
                  <button
                    type="button"
                    className="show-password"
                    onClick={() => handleShowPassword("loginPassword")}
                  >
                    {showPassword.loginPassword ? <FiUnlock /> : <FiLock />}
                  </button>
                </div>
                <button type="submit" className="submit-btn">
                  Entrar
                </button>
              </form>
              <div className="forgot-password">
                <a
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    handleForgotPassword();
                  }}
                >
                  Esqueceu a senha?
                </a>
              </div>
            </div>

            {/* Signup Form */}
            <div className={`form-section${!isLogin ? " active" : ""}`}>
              <form onSubmit={handleSignup}>
                <div className="form-group">
                  <input
                    type="text"
                    className="form-input"
                    placeholder="Nome"
                    required
                    value={signupName}
                    onChange={(e) => setSignupName(e.target.value)}
                  />
                </div>
                <div className="form-group">
                  <input
                    type="text"
                    className="form-input"
                    placeholder="Sobrenome"
                    required
                    value={signupSurname}
                    onChange={(e) => setSignupSurname(e.target.value)}
                  />
                </div>
                <div className="form-group">
                  <input
                    type="text"
                    className="form-input"
                    placeholder="Idade"
                    required
                    value={signupAge}
                    onChange={(e) => setSignupAge(e.target.value)}
                  />
                </div>
                <div className="form-group">
                  <input
                    type="text"
                    className="form-input"
                    placeholder="CPF"
                    required
                    value={signupCpf}
                    onChange={(e) => setSignupCpf(e.target.value)}
                  />
                </div>
                <div className="form-group">
                  <input
                    type="text"
                    className="form-input"
                    placeholder="Telefone"
                    required
                    value={signupPhone}
                    onChange={(e) => setSignupPhone(e.target.value)}
                  />
                </div>
                <div className="form-group">
                  <input
                    type="email"
                    className="form-input"
                    placeholder="Email"
                    required
                    value={signupEmail}
                    onChange={(e) => setSignupEmail(e.target.value)}
                  />
                </div>
                <div className="form-group">
                  <input
                    type={showPassword.signupPassword ? "text" : "password"}
                    className="form-input"
                    placeholder="Senha"
                    required
                    minLength={6}
                    value={signupPassword}
                    onChange={(e) => setSignupPassword(e.target.value)}
                  />
                  <button
                    type="button"
                    className="show-password"
                    onClick={() => handleShowPassword("signupPassword")}
                  >
                    {showPassword.signupPassword ? <FiUnlock /> : <FiLock />}
                  </button>
                </div>
                <div className="form-group">
                  <input
                    type={showPassword.confirmPassword ? "text" : "password"}
                    className="form-input"
                    placeholder="Confirmar senha"
                    required
                    value={signupConfirmPassword}
                    onChange={(e) => setSignupConfirmPassword(e.target.value)}
                  />
                  <button
                    type="button"
                    className="show-password"
                    onClick={() => handleShowPassword("confirmPassword")}
                  >
                    {showPassword.confirmPassword ? <FiUnlock /> : <FiLock />}
                  </button>
                </div>
                <div className="form-group">
                  <select
                    className="form-input"
                    value={signupRole}
                    onChange={(e) => setSignupRole(e.target.value)}
                  >
                    <option value="user">Usuário</option>
                    <option value="admin">Administrador</option>
                  </select>
                </div>
                <button type="submit" className="submit-btn">
                  Criar Conta
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Login;
